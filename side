#include <iostream>
#include <string>
#include <cctype>

using namespace std;

// Function to preprocess the string (remove spaces, punctuation, and convert to lowercase)
string preprocess(const string& t)
{
    string cleanStr;

    // Iterate through each character in the input string
    for (char ch : t)
    {
        // Check if the character is alphanumeric
        if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9'))
        {
            // Convert to lowercase and add to the clean string
            cleanStr += tolower(ch);
        }
    }

    return cleanStr;
}

// Recursive function to check if a string is a palindrome
bool isPalindrome(const string& t, int left, int right)
{
    // Base case: if left index is greater than or equal to right index, it's a palindrome
    if (left >= right)
    {
        return true;
    }

    // If characters at left and right indices are not the same, it's not a palindrome
    if (t[left] != t[right])
    {
        return false;
    }

    // Recursive case: move towards the center of the string
    return isPalindrome(t, left + 1, right - 1);
}

int main()
{
    string input;

    cout << "Enter a phrase to check if it's a palindrome (or type 'exit' to quit):\n";

    while (true)
    {
        // Get the input phrase from the user
        getline(cin, input);

        // Exit the loop if the user types 'exit'
        if (input == "exit")
        {
            break;
        }

        // Preprocess the input string
        string processed = preprocess(input);
        // Check if the processed string is a palindrome
        bool result = isPalindrome(processed, 0, processed.size() - 1);

        // Output the result
        if (result)
        {
            cout << "\"" << input << "\" is a palindrome.\n";
        }
        else
        {
            cout << "\"" << input << "\" is not a palindrome.\n";
        }

        cout << "Enter another phrase (or type 'exit' to quit):\n";
    }

    return 0;
}
